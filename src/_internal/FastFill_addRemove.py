# -*- coding: utf-8 -*-
import os
import sys

# Form implementation generated from reading ui file 'FastFill_addRemove.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import configparser
import re

from PyQt5.QtCore import QStandardPaths
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMessageBox, QInputDialog


class UiDialogAddRemove(object):
    documents_path = QStandardPaths.writableLocation(QStandardPaths.DocumentsLocation)
    config_file = os.path.join(documents_path, "FastFillConfig.ini")

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(790, 682)
        Dialog.setMinimumSize(QtCore.QSize(790, 682))
        Dialog.setMaximumSize(QtCore.QSize(790, 682))
        font = QtGui.QFont()
        font.setFamily("Arial")
        Dialog.setFont(font)
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(450, 30, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color:rgb(255, 255, 255);\n"
                                   "border: 2px solid #bbb;\n"
                                   "border-radius: 8px;")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_10 = QtWidgets.QLabel(Dialog)
        self.label_10.setGeometry(QtCore.QRect(50, 30, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color:rgb(255, 255, 255);\n"
                                    "border: 2px solid #bbb;\n"
                                    "border-radius: 8px;")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.frame_5 = QtWidgets.QFrame(Dialog)
        self.frame_5.setGeometry(QtCore.QRect(390, 0, 2, 682))
        self.frame_5.setStyleSheet("QFrame{\n"
                                   "background-color:rgb(255, 255, 255);\n"
                                   "border: 2px solid #bbb;\n"
                                   "border-radius: 8px;\n"
                                   "}")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.listWidget = QtWidgets.QListWidget(Dialog)
        self.listWidget.setGeometry(QtCore.QRect(20, 90, 341, 221))
        self.listWidget.setStyleSheet("background-color:rgb(255, 255, 255);\n"
                                      "border: 2px solid #bbb;\n"
                                      "border-radius: 8px;")
        self.listWidget.setObjectName("listWidget")
        self.listWidget_2 = QtWidgets.QListWidget(Dialog)
        self.listWidget_2.setGeometry(QtCore.QRect(420, 90, 341, 221))
        self.listWidget_2.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.listWidget_2.setStyleSheet("background-color:rgb(255, 255, 255);\n"
                                        "border: 2px solid #bbb;\n"
                                        "border-radius: 8px;")
        self.listWidget_2.setObjectName("listWidget_2")
        self.listWidget_3 = QtWidgets.QListWidget(Dialog)
        self.listWidget_3.setGeometry(QtCore.QRect(420, 330, 341, 221))
        self.listWidget_3.setStyleSheet("background-color:rgb(255, 255, 255);\n"
                                        "border: 2px solid #bbb;\n"
                                        "border-radius: 8px;")
        self.listWidget_3.setObjectName("listWidget_3")
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(430, 560, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setStyleSheet("QPushButton {\n"
                                        "    background-color: white;\n"
                                        "    border: 2px solid #bbb;\n"
                                        "    border-radius: 8px;\n"
                                        "    padding: 8px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: #d6d6d6;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: #c2c2c2;\n"
                                        "}")
        self.pushButton_5.setIconSize(QtCore.QSize(15, 15))
        self.pushButton_5.setCheckable(False)
        self.pushButton_5.setIcon(QIcon("_internal/plusIcon.png"))
        self.pushButton_5.setIconSize(QtCore.QSize(40, 40))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        self.pushButton_6.setGeometry(QtCore.QRect(470, 560, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_6.setStyleSheet("QPushButton {\n"
                                        "    background-color: white;\n"
                                        "    border: 2px solid #bbb;\n"
                                        "    border-radius: 8px;\n"
                                        "    padding: 8px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: #d6d6d6;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: #c2c2c2;\n"
                                        "}")
        self.pushButton_6.setIconSize(QtCore.QSize(15, 15))
        self.pushButton_6.setCheckable(False)
        self.pushButton_6.setIcon(QIcon("_internal/minusIcon.png"))
        self.pushButton_6.setIconSize(QtCore.QSize(40, 40))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(Dialog)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 320, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_7.setStyleSheet("QPushButton {\n"
                                        "    background-color: white;\n"
                                        "    border: 2px solid #bbb;\n"
                                        "    border-radius: 8px;\n"
                                        "    padding: 8px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: #d6d6d6;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: #c2c2c2;\n"
                                        "}")
        self.pushButton_7.setCheckable(False)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.setIcon(QIcon("_internal/plusIcon.png"))
        self.pushButton_7.setIconSize(QtCore.QSize(40, 40))
        self.pushButton_8 = QtWidgets.QPushButton(Dialog)
        self.pushButton_8.setGeometry(QtCore.QRect(70, 320, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_8.setStyleSheet("QPushButton {\n"
                                        "    background-color: white;\n"
                                        "    border: 2px solid #bbb;\n"
                                        "    border-radius: 8px;\n"
                                        "    padding: 8px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: #d6d6d6;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: #c2c2c2;\n"
                                        "}")
        self.pushButton_8.setIcon(QIcon("_internal/minusIcon.png"))
        self.pushButton_8.setIconSize(QtCore.QSize(40, 40))
        self.pushButton_8.setCheckable(False)
        self.pushButton_8.setObjectName("pushButton_8")

        self.pushButton_10 = QtWidgets.QPushButton(Dialog)
        self.pushButton_10.setGeometry(QtCore.QRect(200, 320, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_10.setStyleSheet("QPushButton {\n"
                                         "    background-color: #e0e0e0;\n"
                                         "    border: 2px solid #bbb;\n"
                                         "    border-radius: 8px;\n"
                                         "    padding: 8px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: #d6d6d6;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:pressed {\n"
                                         "    background-color: #c2c2c2;\n"
                                         "}")
        self.pushButton_10.setIconSize(QtCore.QSize(15, 15))
        self.pushButton_10.setCheckable(False)
        self.pushButton_10.setObjectName("pushButton_10")




        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(50, 430, 281, 81))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: red")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setWordWrap(True)
        self.label_4.setObjectName("label_4")
        self.label_4.hide()

        self.pushButton_9 = QtWidgets.QPushButton(Dialog)
        self.pushButton_9.setGeometry(QtCore.QRect(110, 550, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_9.setStyleSheet("QPushButton {\n"
                                        "    background-color: #e0e0e0;\n"
                                        "    border: 2px solid red;\n"
                                        "    border-radius: 8px;\n"
                                        "    padding: 8px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: #d6d6d6;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: #c2c2c2;\n"
                                        "}")
        self.pushButton_9.setIconSize(QtCore.QSize(15, 15))
        self.pushButton_9.setCheckable(False)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.hide()

        self.listWidget.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.listWidget_3.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)


        self.pushButton_7.clicked.connect(self.addCategory)
        self.pushButton_8.clicked.connect(self.removeCategory)

        self.listWidget_2.itemSelectionChanged.connect(self.updateListWidget3)
        self.listWidget.model().rowsMoved.connect(self.saveCategoryOrder)

        self.pushButton_5.clicked.connect(self.addElement)
        self.pushButton_6.clicked.connect(self.removeElement)
        self.pushButton_9.clicked.connect(self.restart_app)
        self.pushButton_10.clicked.connect(self.rename_category)

        # Populate the combo boxes with data from the config file
        self.populate_lists()


    # Function to check if a section has keys
    def is_section_empty(self, config, section):
        if section in config:
            return not bool(config[section])  # True if section has no keys
        else:
            raise ValueError("Section is empty")

    def saveCategoryOrder(self):
        """ Saves the new order of categories (sections) to the INI file. """
        config = configparser.ConfigParser()
        config.read(self.config_file)

        # Get new category order from listWidget_2
        new_order = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]

        # Recreate the config with new order
        new_config = configparser.ConfigParser()
        for section in new_order:
            new_config.add_section(section)
            for key, value in config[section].items():
                new_config.set(section, key, value)

        # Write back to file
        with open(self.config_file, 'w') as cfg:
            new_config.write(cfg)

        self.label_4.show()
        self.pushButton_9.show()

    def rename_category(self):
        """
        Renames the selected category (section) from the listWidget_2 and updates the INI configuration.
        """
        # Get the selected item from listWidget_2
        selected_item = self.listWidget.currentItem()

        if not selected_item:
            QMessageBox.warning(None, "Selection Error", "Bitte wähle eine Kategorie aus.")
            return

        old_category_name = selected_item.text()  # Get the current category name

        # Show input dialog to ask for a new category name
        new_category_name, ok = QInputDialog.getText(None, "Kategorie umbenennen", "Gebe einen neuen Namen ein:",
                                                     text=old_category_name)

        if ok and new_category_name:  # If user confirmed and entered a name
            # Check if the new name already exists
            config = configparser.ConfigParser()
            config.read(self.config_file)

            if new_category_name in config.sections():
                QMessageBox.warning(None, "Category Exists", "Kategorie mit diesem Namen existiert bereits.")
                return

            # Rename the category in the config
            config.add_section(new_category_name)  # Add new section
            for key, value in config[old_category_name].items():
                config[new_category_name][key] = value  # Copy the items to the new section

            # Remove the old section
            config.remove_section(old_category_name)

            # Save the updated config file
            with open(self.config_file, 'w') as cfg:
                config.write(cfg)

            # Update the listWidget_2 with the new category name
            selected_item.setText(new_category_name)

            self.label_4.show()
            self.pushButton_9.show()


    def addCategory(self):
        # Load the existing configuration
        config = configparser.ConfigParser()
        config.read(self.config_file)

        # Check if the maximum category limit (8) is reached
        if len(config.sections()) >= 8:
            QMessageBox.warning(None, "Maximale Anzahl erreicht",
                                "Es können keine weiteren Kategorien hinzugefügt werden. Maximal 8 Kategorien sind möglich.")
            return

        # Open a QInputDialog to get the new category name
        new_category, ok = QInputDialog.getText(None, "Neue Kategorie", "Name der neuen Kategorie:")

        # If user clicked OK and entered a valid name
        if ok and new_category:
            new_category = new_category.strip()  # Remove leading/trailing spaces

            # Check if category already exists
            if new_category in config.sections():
                QMessageBox.warning(None, "Category Exists", "Eine Kategorie mit diesem Namen existiert bereits.")
                return

            # Add the new section to the config
            config.add_section(new_category)

            # Save the updated config to the file
            with open(self.config_file, 'w') as cfg:
                config.write(cfg)

            # Ensure UI elements are shown if needed
            self.label_4.show()
            self.pushButton_9.show()

            # Update the list widgets to reflect the new section
            self.populate_lists()


    def removeCategory(self):
        # Zuerst die ausgewählte Kategorie aus dem listWidget ermitteln
        selected_item = self.listWidget.selectedItems()

        if not selected_item:
            # Zeige eine Warnung an, wenn keine Kategorie ausgewählt wurde
            QMessageBox.warning(None, "Input Error", "Bitte wähle eine Kategorie zum Entfernen aus.")
            return

        # Den Text der ausgewählten Kategorie extrahieren
        category_to_remove = selected_item[0].text()

        # Konfiguration laden
        config = configparser.ConfigParser()
        config.read(self.config_file)

        # Überprüfen, ob die Kategorie existiert
        if category_to_remove not in config.sections():
            QMessageBox.warning(None, "Error", f"Kategorie '{category_to_remove}' existiert nicht.")
            return

        # Show a confirmation dialog
        reply = QtWidgets.QMessageBox.question(
            None,
            "Kategorie löschen?",
            f"Möchtest du die Kategorie '{category_to_remove}' wirklich entfernen?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )

        # If the user chooses 'No', exit the function
        if reply == QtWidgets.QMessageBox.No:
            return

        # Die Kategorie aus der Konfiguration entfernen
        config.remove_section(category_to_remove)

        # Die aktualisierte Konfiguration zurück in die Datei schreiben
        with open(self.config_file, 'w') as cfg:
            config.write(cfg)

        self.label_4.show()
        self.pushButton_9.show()

        self.populate_lists()

    def updateListWidget3(self):
        config = configparser.ConfigParser()
        config.read(self.config_file)

        self.listWidget_3.clear()

        # Überprüfen, ob ein Wert in listWidget_2 ausgewählt wurde
        selected_item = self.listWidget_2.selectedItems()
        if not selected_item:
            return  # Wenn nichts ausgewählt ist, keine Änderungen vornehmen

        section = selected_item[0].text()

        for key in config[section]:
            item = QtWidgets.QListWidgetItem(config[section][key])
            self.listWidget_3.addItem(item)

    def addElement(self):
        """
        Adds a new item to the selected category in listWidget_3 and updates the INI configuration.
        Uses QInputDialog for user input.
        """
        # Ensure a category is selected in listWidget_2
        current_item = self.listWidget_2.currentItem()
        if not current_item:
            QMessageBox.warning(None, "Auswahlfehler", "Bitte wähle zuerst eine Kategorie aus der Liste.")
            return

        section = current_item.text()  # Get selected section name

        # Load the existing configuration
        config = configparser.ConfigParser()
        config.read(self.config_file)

        # Ensure the selected section exists
        if section not in config.sections():
            QMessageBox.warning(None, "Error",
                                "Ein Fehler ist aufgetreten. Versuche das Fenster oder die Anwendung neu zu öffnen.")
            return

        # Open a QInputDialog to get the new item's name
        new_item, ok = QInputDialog.getText(None, "Neuer Wert", "Name des neuen Wertes:")

        # If user clicked OK and entered a valid name
        if ok and new_item:
            new_item = new_item.strip()  # Remove leading/trailing spaces

            # Check if the new item already exists in the selected section
            existing_values = [config[section][key] for key in config[section]]

            if new_item in existing_values:
                QMessageBox.warning(None, "Wert existiert bereits", "Dieser Wert existiert bereits in der Kategorie.")
                return

            # Add new item to listWidget_3
            self.listWidget_3.addItem(new_item)

            # Generate a unique key and add the new item to the INI config
            new_key = f"item{len(config[section]) + 1}"  # Example: item1, item2, item3...
            config[section][new_key] = new_item

            # Save the updated configuration
            with open(self.config_file, 'w') as cfg:
                config.write(cfg)

    def removeElement(self):
        """
        Removes the selected item from listWidget_3 and updates the INI configuration.
        """
        # Get the selected item from listWidget_3
        selected_item = self.listWidget_3.currentItem()
        if not selected_item:
            QtWidgets.QMessageBox.warning(None, "Selection Error", "Bitte wähle zuerst einen Wert aus der Liste.")
            return

        item_text = selected_item.text()  # Get the text of the selected item

        # Get the selected category from listWidget_2
        current_category = self.listWidget_2.currentItem()
        if not current_category:
            QtWidgets.QMessageBox.warning(None, "Selection Error", "Bitte wähle zuerst eine Kategorie aus der Liste.")
            return

        section = current_category.text()  # Get the section name

        # Load the config file
        config = configparser.ConfigParser()
        config.read(self.config_file)

        # Ensure the section exists in the config
        if section not in config.sections():
            QtWidgets.QMessageBox.warning(None, "Error", "Kategorie nicht gefunden.")
            return

        # Find the key that corresponds to the selected item value
        key_to_remove = None
        for key, value in config[section].items():
            if value == item_text:
                key_to_remove = key
                break

        # If key is found, remove it
        if key_to_remove:
            # Collect all items except the one being removed
            items = [value for key, value in config[section].items() if key != key_to_remove]

            # Clear the section's keys (but keep the section itself)
            for key in list(config[section].keys()):
                config.remove_option(section, key)

            # Rewrite the keys in the correct order
            for index, value in enumerate(items, start=1):
                config.set(section, f"item{index}", value)

            # Save changes to the config file
            with open(self.config_file, 'w') as cfg:
                config.write(cfg)

            # Remove item from listWidget_3
            self.listWidget_3.takeItem(self.listWidget_3.row(selected_item))

            # QtWidgets.QMessageBox.information(None, "Success", "Wert wurde erfolgreich entfernt.")
        else:
            QtWidgets.QMessageBox.warning(None, "Error", "Ein Fehler ist aufgetreten. Versuche das Fenster oder die Anwendung neu zu öffnen.")

    def populate_lists(self):
        """
        Populates the combo boxes with data from the INI configuration file.
        This method adds all available sections to comboBox and comboBox_2,
        and all entries under 'Sonstige' to comboBox_3.
        """
        # Load the configuration from the INI file
        config = configparser.ConfigParser()
        config.read(self.config_file)

        self.listWidget.clear()
        self.listWidget_2.clear()
        self.listWidget_3.clear()

        try:
            for section in config.sections():
                item = QtWidgets.QListWidgetItem(section)
                self.listWidget.addItem(item)

            for section in config.sections():
                item = QtWidgets.QListWidgetItem(section)
                self.listWidget_2.addItem(item)

            for index, section in enumerate(config.sections()):
                if index == 0:
                    for key in config[section]:
                        item = QtWidgets.QListWidgetItem(config[section][key])
                        self.listWidget_3.addItem(item)
                else:
                    break

            self.listWidget_2.setCurrentRow(0)
        except Exception as e:
            print(e)

    def restart_app(self):
        """
        Restarts the application by relaunching the .exe file.
        """
        # logging.info("restarting Application...")
        # logging.info("opening new exe...")
        os.execl(sys.executable, sys.executable, *sys.argv)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "FastFill"))
        self.label_6.setText(_translate("Dialog", "Werte hinzufügen / entfernen"))
        self.label_10.setText(_translate("Dialog", "Kategorie hinzufügen / entfernen"))
        self.label_10.setWhatsThis(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Wie das Bearbeiten der Kategorien funktioniert:</span><br/><br/><span style=\" font-size:10pt; font-weight:400;\">- Mit dem Plus-Symbol können neue Kategorien erstellt werden</span></p><p><span style=\" font-size:10pt; font-weight:400;\">- Mit dem Minus-Symbol können bestehende Kategorien entfernt werden (Werte einer Kategorie werden ebenfalls entfernt)</span></p><p><span style=\" font-size:10pt; font-weight:400;\">- Zum Sortieren der einzelnen Kategorien kannst du diese einfach per Drag &amp; Drop verschieben.</span></p><p><br/></p><p><span style=\" font-size:9pt; font-weight:400;\">Hinweis: Wenn Änderungen an den Kategorien vorgenommen werden muss die App neu gestartet werden. Klicke dazu einfach auf den Button der bei einer solchen Änderung erscheint.</span></p></body></html>"))
        self.listWidget.setWhatsThis(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Wie das Bearbeiten der Kategorien funktioniert:</span><br/><br/><span style=\" font-size:10pt;\">- Mit dem Plus-Symbol können neue Kategorien erstellt werden</span></p><p><span style=\" font-size:10pt;\">- Mit dem Minus-Symbol können bestehende Kategorien entfernt werden (Werte einer Kategorie werden ebenfalls entfernt)</span></p><p><span style=\" font-size:10pt;\">- Zum Sortieren der einzelnen Kategorien kannst du diese einfach per Drag &amp; Drop verschieben.</span></p><p><br/></p><p>Hinweis: Wenn Änderungen an den Kategorien vorgenommen werden muss die App neu gestartet werden. Klicke dazu einfach auf den Button der bei einer solchen Änderung erscheint.</p></body></html>"))
        __sortingEnabled = self.listWidget_2.isSortingEnabled()
        self.listWidget_2.setSortingEnabled(False)
        self.listWidget_2.setSortingEnabled(__sortingEnabled)

        self.label_4.setText(
            _translate("Dialog", "Die Anwendung muss neu gestartet werden, damit die Änderungen wirksam werden."))
        self.pushButton_9.setText(_translate("Dialog", "FastFill neu starten"))
        self.pushButton_10.setText(_translate("Dialog", "Kategorie umbenennen"))




